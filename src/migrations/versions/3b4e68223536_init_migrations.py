"""init_migrations

Revision ID: 3b4e68223536
Revises: 
Create Date: 2023-04-24 13:46:38.926333

"""
from alembic import op
import sqlalchemy as sa

from db_models import UserAuthHistoryPC, UserAuthHistoryMobile, UserAuthHistoryOther

# revision identifiers, used by Alembic.
revision = '3b4e68223536'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('role',
                    sa.Column('name', sa.String(length=200), nullable=False),
                    sa.Column('description', sa.String(length=500), nullable=True),
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    sa.UniqueConstraint('name'),
                    schema='auth'
                    )
    op.create_table('scope',
                    sa.Column('name', sa.String(length=50), nullable=False),
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    sa.UniqueConstraint('name'),
                    schema='auth'
                    )
    op.create_table('user',
                    sa.Column('login', sa.String(length=50), nullable=False),
                    sa.Column('email', sa.String(length=100), nullable=False),
                    sa.Column('password', sa.String(length=100), nullable=False),
                    sa.Column('first_name', sa.String(length=200), nullable=True),
                    sa.Column('surname', sa.String(length=200), nullable=True),
                    sa.Column('patronymic', sa.String(length=200), nullable=True),
                    sa.Column('phone', sa.String(length=100), nullable=True),
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email'),
                    sa.UniqueConstraint('id'),
                    sa.UniqueConstraint('login'),
                    schema='auth'
                    )
    op.create_table('permissions',
                    sa.Column('scope_id', sa.UUID(), nullable=False),
                    sa.Column('role_id', sa.UUID(), nullable=False),
                    sa.Column('access_level', sa.SmallInteger(), nullable=False),
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['role_id'], ['auth.role.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['scope_id'], ['auth.scope.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    sa.UniqueConstraint('scope_id', 'role_id', name='uc_scope_role_unique'),
                    schema='auth'
                    )
    op.create_table('user_auth_history',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('user_agent', sa.String(length=1000), nullable=False),
                    sa.Column('device_type', sa.String(length=50), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['auth.user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', 'device_type'),
                    schema='auth',
                    postgresql_partition_by='LIST (device_type)'
                    )
    op.create_index('idx_user_is_created_at', 'user_auth_history', ['user_id', 'created_at', 'id'], unique=False,
                    schema='auth')
    op.create_index(op.f('ix_auth_user_auth_history_user_id'), 'user_auth_history', ['user_id'], unique=False,
                    schema='auth')
    op.create_table('oauth_user',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('client_id', sa.String(length=256), nullable=False),
                    sa.Column('email', sa.String(length=100), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('tag', sa.Enum('vk', 'yandex', name='sociallogin'), nullable=True),
                    sa.Column('user_id', sa.UUID(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['auth.user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email'),
                    sa.UniqueConstraint('id')
                    )
    op.create_table('user_role',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('user_id', sa.UUID(), nullable=True),
                    sa.Column('role_id', sa.UUID(), nullable=True),
                    sa.ForeignKeyConstraint(['role_id'], ['auth.role.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['auth.user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    sa.UniqueConstraint('user_id', 'role_id', name='uc_user_role_unique')
                    )
    op.create_table('user_auth_history_mobile',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('user_agent', sa.String(length=1000), nullable=False),
                    sa.Column('device_type', sa.String(length=50), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['auth.user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', 'device_type')
                    )
    op.create_index(op.f('ix_user_auth_history_mobile_user_id'), 'user_auth_history_mobile', ['user_id'], unique=False)
    op.create_table('user_auth_history_other',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('user_agent', sa.String(length=1000), nullable=False),
                    sa.Column('device_type', sa.String(length=50), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['auth.user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', 'device_type')
                    )
    op.create_index(op.f('ix_user_auth_history_other_user_id'), 'user_auth_history_other', ['user_id'], unique=False)
    op.create_table('user_auth_history_pc',
                    sa.Column('id', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('user_agent', sa.String(length=1000), nullable=False),
                    sa.Column('device_type', sa.String(length=50), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['auth.user.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', 'device_type')
                    )
    op.create_index(op.f('ix_user_auth_history_pc_user_id'), 'user_auth_history_pc', ['user_id'], unique=False)

    for table in (UserAuthHistoryPC, UserAuthHistoryMobile, UserAuthHistoryOther):
        op.execute(
            f"""ALTER TABLE user_auth_history ATTACH PARTITION {table.__tablename__}
                            FOR VALUES IN ('{table.partition_field}')
                    """
        )


# ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_auth_history_pc_user_id'), table_name='user_auth_history_pc')
    op.drop_table('user_auth_history_pc')
    op.drop_index(op.f('ix_user_auth_history_other_user_id'), table_name='user_auth_history_other')
    op.drop_table('user_auth_history_other')
    op.drop_index(op.f('ix_user_auth_history_mobile_user_id'), table_name='user_auth_history_mobile')
    op.drop_table('user_auth_history_mobile')
    op.drop_table('user_role')
    op.drop_table('oauth_user')
    op.drop_index(op.f('ix_auth_user_auth_history_user_id'), table_name='user_auth_history', schema='auth')
    op.drop_index('idx_user_is_created_at', table_name='user_auth_history', schema='auth')
    op.drop_table('user_auth_history', schema='auth')
    op.drop_table('permissions', schema='auth')
    op.drop_table('user', schema='auth')
    op.drop_table('scope', schema='auth')
    op.drop_table('role', schema='auth')
    # ### end Alembic commands ###
